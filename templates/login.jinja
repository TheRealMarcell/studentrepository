<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %}
    <h1 class="text-center pt-5">Login</h1>
    <form class="myForm">
      <div class="form-group pb-4">
        <label>Username</label>
        <input class="form-control" id="username" aria-describedby="emailHelp" placeholder="Enter your username">
      </div>
      <div class="form-group pb-4">
        <label>Password</label>
        <input type="password" class="form-control" id="password" placeholder="Password">
        <small id="passwordHelp" class="form-text text-muted "></small>
      </div>
      <button onclick="login()" type="button" class="btn btn-lg btn-primary">Login</button>
    </form>

    <script>
        function xssPrevention(toOutput){
            return toOutput.replace(/\&/g, '&amp;')
                .replace(/\</g, '&lt;')
                .replace(/\>/g, '&gt;')
                .replace(/\"/g, '&quot;')
                .replace(/\'/g, '&#x27;')
                .replace(/\//g, '&#x2F;');
        }

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            let username = xssPrevention($("#username").val())
            let password = xssPrevention($("#password").val())


            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: username,
                password: password
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}